import java.text.SimpleDateFormat

apply plugin: 'com.android.application'

String releaseTime() {
    SimpleDateFormat  sf=new SimpleDateFormat("yyyy-MM-dd-HH-mm")
    String path=sf.format(new Date())
    return path
}
String desPath=new File("").getAbsolutePath()+"/release"
android {
    signingConfigs {
        config {
            keyAlias 'bryan'
            keyPassword '123456'
            storeFile file('../key/bryan.jks')
            storePassword '123456'
        }
    }
    compileSdkVersion ANDROID_BUILD_SDK_VERSION as int
    buildToolsVersion ANDROID_BUILD_TOOLS_VERSION
    defaultConfig {
        applicationId "com.bryan.commondemo"
        minSdkVersion ANDROID_BUILD_MIN_SDK_VERSION as int
        targetSdkVersion ANDROID_BUILD_TARGET_SDK_VERSION as int
        versionCode VERSION_CODE as int
        versionName VERSION_NAME
        ndk {
            //设置支持的SO库架构
            abiFilters 'armeabi','x86'  //'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
        vectorDrawables.useSupportLibrary = true
    }
    /**
     *  buildConfigField "String", "APP", "boy"   需要"String"
        resValue "string","APP","boy"              需要"string"
     */
    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
        }
        release {
            //不显示日志
            buildConfigField "boolean", "LOG_DEBUG", "false"
            //混淆
            minifyEnabled true
           //zipalign优化
            zipAlignEnabled true
            //移除未使用的资源
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config

        }
    }
    flavorDimensions "my"

    productFlavors {
        baidu {
            resValue "string", "app_name", "百度版"
            dimension "my"
        }
        qq {
            resValue "string", "app_name", "qq版"
            dimension "my"
        }
        googleplay {
            resValue "string", "app_name", "google版"
            dimension "my"
        }
        productFlavors.all { flavor ->
            flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
        }
    }


    sourceSets {
        main {
            java.srcDirs=['src/main/java','src/main/java-gen']
        }
    }

    lintOptions {
        abortOnError false
        // 防止在发布的时候出现因MissingTranslation导致Build Failed!
        disable 'MissingTranslation'
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

//    applicationVariants.all { variant ->
//        variant.outputs.all { output ->
//            if (outputFile != null && outputFileName.endsWith('release.apk')) {
//                outputFileName = "${variant.productFlavors[0].name}_${releaseTime()}_${defaultConfig.versionName}.apk"
//            }
//        }
//    }


    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${variant.productFlavors[0].name}_${releaseTime()}_${defaultConfig.versionName}.apk"
        }
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    api project(':library')
    implementation 'com.jakewharton:butterknife:10.2.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.0'

}

//打包后复制到目录
task copyTask(type: Copy) {
    from 'build/outputs/apk'
    SimpleDateFormat  sf=new SimpleDateFormat("yyyy-MM-dd-HH-mm")
    String path=sf.format(new Date())
    exclude '*unaligned*'
    into '../'+path

}